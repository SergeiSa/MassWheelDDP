close all; clear; %clear classes;
clc; 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dynamics

LinkArray = SRD_get('LinkArray');

SymbolicEngine = SRDSymbolicEngine('LinkArray', LinkArray, 'Casadi', false);
SymbolicEngine.InitializeLinkArray();

SRD_dynamics_derive_JacobiansForLinkArray('SymbolicEngine', SymbolicEngine);

H = SRD_dynamics_derive_JSIM('SymbolicEngine', SymbolicEngine);

[in, dH] = SRD_dynamics_derive_GeneralizedInertialForces_via_dH(...
    'SymbolicEngine', SymbolicEngine, ...
    'JointSpaceInertiaMatrix', H);

g = SRD_dynamics_derive_GeneralizedGravitationalForces(...
    'SymbolicEngine', SymbolicEngine, ...
    'GravitationalConstant', [0; 0; -9.8]);

d = sym([0;0.00015]);

T = sym([0;0.061]);

description = SRD_generate_dynamics_generalized_coordinates_model(...
    'SymbolicEngine', SymbolicEngine, ...
    'H', H, ...
    'c', (in + g + d), ...
    'T', T, ...
    'Symbolic_ToOptimizeFunctions', true, ...
    'Casadi_cfile_name', 'g_dynamics_generalized_coordinates', ...
    'FunctionName_H', 'g_dynamics_H', ...
    'FunctionName_c', 'g_dynamics_c', ...
    'FunctionName_T', 'g_dynamics_T', ...
    'Path', 'Dynamics/');

Handler_dynamics_generalized_coordinates_model = SRD_get_handler__dynamics_generalized_coordinates_model('description', description);
SRD_save(Handler_dynamics_generalized_coordinates_model, 'Handler_dynamics_generalized_coordinates_model');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Linearization

[description, A, B] = SRD_generate_dynamics_linearization(...
    'SymbolicEngine',                         SymbolicEngine, ...
    'H', H, ...
    'c', (in + g + d), ...
    'T', T, ...
    'Symbolic_ToOptimizeFunctions',           true, ...
    'Casadi_cfile_name',                      'g_dynamics_linearization', ...
    'FunctionName_A',                         'g_linearization_A', ...
    'FunctionName_B',                         'g_linearization_B', ...
    'FunctionName_c',                         'g_linearization_c', ...
    'Path',                                   'Linearization/');

Handler_dynamics_Linearized_Model = SRD_get_handler__dynamics_linearized_model('description', description);
SRD_save(Handler_dynamics_Linearized_Model, 'Handler_dynamics_Linearized_Model');

A = subs(A, SymbolicEngine.iH, eye(SymbolicEngine.dof) \ H)
B = subs(B, SymbolicEngine.iH, eye(SymbolicEngine.dof) \ H)

x = [SymbolicEngine.q; SymbolicEngine.v];
u =  SymbolicEngine.u;

fxx = MatrixJacobian(A, x)
fxu = MatrixJacobian(A, u)
fux = MatrixJacobian(B, x)
fuu = MatrixJacobian(B, u)



